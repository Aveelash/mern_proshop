# your-root-directory/nginx/nginx.conf

# Set the number of worker processes. 'auto' means Nginx will use as many
# worker processes as there are CPU cores, which is generally optimal.
worker_processes auto;

# Define event model and maximum number of simultaneous connections.
events {
    # Maximum number of connections per worker process.
    worker_connections 1024;
}

# HTTP server configuration block.
http {
    # Include MIME types for proper content-type headers.
    include       mime.types;
    # Default MIME type if Nginx cannot determine it.
    default_type  application/octet-stream;

    # Enable sendfile for efficient file transfers.
    sendfile        on;
    # Timeout for keep-alive connections.
    keepalive_timeout  65;

    # Define an upstream block for your backend service.
    # 'backend' is the service name defined in docker-compose.yml.
    # Nginx will use this to forward requests to your Node.js backend.
    upstream backend {
        # 'backend:5000' refers to the 'backend' service (container)
        # and its internal port 5000 within the Docker network.
        server backend:5000;
    }

    # Define a server block to handle incoming HTTP requests.
    server {
        # Nginx will listen on port 80 for incoming HTTP requests.
        listen 80;

        # Location block for the root path ('/').
        # This will serve your React frontend static files.
        location / {
            # 'root' specifies the directory where Nginx will look for files.
            # This path '/usr/share/nginx/html' will be mounted with your
            # frontend 'build' directory via Docker Compose.
            root /usr/share/nginx/html;
            # 'try_files' is crucial for React Router.
            # It tries to find the requested URI, then the URI as a directory,
            # and if neither is found, it serves 'index.html'.
            # This ensures client-side routing works when refreshing pages.
            try_files $uri $uri/ /index.html;
        }

        # Location block for API requests ('/api').
        # All requests starting with '/api' will be proxied to the backend.
        location /api {
            # 'proxy_pass' forwards the request to the 'backend' upstream defined above.
            proxy_pass http://backend;
            # Set HTTP protocol version to 1.1 for better performance and features.
            proxy_http_version 1.1;
            # These headers are important for WebSocket support and proper proxying.
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            # Pass the original Host header to the backend.
            proxy_set_header Host $host;
            # Bypass proxy cache for upgrade requests.
            proxy_cache_bypass $http_upgrade;
        }

        # Location block for uploaded files ('/uploads').
        # This will also proxy requests for uploaded files to the backend.
        # Your backend serves these files, and Nginx acts as a proxy for them.
        location /uploads {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
